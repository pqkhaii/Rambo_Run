interface IClientOptions {
    disableKeyboardEvents?: boolean;
    dev?: boolean;
}

interface IGame {
    id: string;
    name: string;
    nameRouter: string;
    cid: IGameCategory[];
    url: string;
    orientation: string;
    ratio: string;
    description: string;
    descriptionSub: any;
    image: IImage;
    banner: IBanner;
    playType: number;
    platformType: number;
    leaderboardType: number;
    createdAt: string;
    updatedAt: string;
    mobileType: number;
    app: number;
    appUrl: any;
    appDownload: any;
}
interface IGameCategory {
    createdAt: any;
    updatedAt: any;
    id: any;
    name: any;
    image: any;
    display: boolean;
}
interface IImage {
    icon: string;
    thumbnail: string;
    background: string;
}
interface IBanner {
    hot: boolean;
    popular: boolean;
    quest: boolean;
    new: boolean;
}

interface IUser {
    account: IAccount;
    activeCitizen: IActiveCitizen;
    roles: string[];
}
interface IAccount {
    sub: string;
    name: string;
    username: string;
    givenName: string;
    familyName: string;
    email: string;
    emailVerified: boolean;
}
interface IActiveCitizen {
    saId: string;
    citizenCode: string;
    userId: string;
    name: string;
    wallet: string;
    level: number;
    status: number;
    createdAt: number;
    updatedAt: number;
    listTopicName: string[];
    score: number;
    isBlocked: number;
    avatarUrl: string;
    refLevel: number;
}

interface IAuthenticateGame {
    gameId: string;
    apiKey: string;
}

declare class Auth {
    constructor();
    protected authenticateUser(): Promise<IUser>;
    protected authenticateGame(params: IAuthenticateGame): Promise<IGame>;
}

interface INewMatch {
    id: string;
    matchId: string;
    gameId: string;
    userId: string;
    completed: boolean;
    startedAt: string;
    createdAt: string;
    updatedAt: string;
    metadata: string;
}

interface IPlayResult {
    score: number;
    level?: number;
    metadata?: string;
}

declare class GameMatch {
    readonly gameId: string;
    readonly apiKey: string;
    readonly parentWindow: Window | undefined;
    constructor(gameId: string, apiKey: string, parentWindow?: Window);
    startMatch(): Promise<INewMatch>;
    completeMatch(matchData: INewMatch, result: IPlayResult, timeout?: number): Promise<any>;
    logMatch(matchId: string, data: any): Promise<any>;
}

declare enum FRIEND_RESPONSE {
    CONFIRM = "CONFIRM",
    DENY = "DENY"
}
declare class UserFriend implements Auth {
    private user;
    constructor(user: IUser);
    getFriendList(): Promise<any>;
    sendFriendInvitation(citizenCode: string): Promise<any>;
    responseFriendInvitation(citizenCode: string, responseStatus: FRIEND_RESPONSE): Promise<any>;
    getFriendInvitationList(): Promise<any>;
    inviteGame(gameName: string, gameUrl: string, matchId: string, friendId: string): Promise<any>;
}
interface UserFriend extends Auth {
}

declare class UserBalance implements Auth {
    private user;
    constructor(user: IUser);
    getAP(): Promise<number>;
}
interface UserBalance extends Auth {
}

declare class UserAccount implements Auth {
    private user;
    constructor(user: IUser);
    getAccount(): IAccount | undefined;
    getSub(): string | undefined;
    getEmail(): string | undefined;
    getName(): string | undefined;
    getUsername(): string | undefined;
    getGivenName(): string | undefined;
    getFamilyName(): string | undefined;
}
interface UserAccount extends Auth {
}

interface IUserQuest {
    questId: string;
    seasonId: number;
    questName: string;
    questType: number;
    questRepeatDay: number;
    countCompletedQuest: number;
    actions: IUserActions;
    rewards: IUserActionReward[];
    completed: boolean;
    claimed: boolean;
}
interface IUserActions {
    [key: string]: {
        actionId: string;
        name: string;
        actionType: number;
        currentPoint: number;
        maxPoint: number;
        rewards: IUserActionReward[];
        completed: boolean;
    };
}
interface IUserActionReward {
    amount: number;
    name: string;
    description: string;
    imageRewardUrl: string;
}

declare class UserQuest implements Auth {
    private user;
    constructor(user: IUser);
    getProcess(): Promise<IUserQuest>;
    claim(questId: string): Promise<any>;
}
interface UserQuest extends Auth {
}

declare class UserCitizen implements Auth {
    private user;
    constructor(user: IUser);
    getCitizen(): IActiveCitizen | undefined;
    getCitizenId(): string | undefined;
    getCitizenName(): string | undefined;
    getCitizenCode(): string | undefined;
    getCitizenWallet(): string | undefined;
    getCitizenLevel(): number | undefined;
    getCitizenAvatar(): string | undefined;
}
interface UserCitizen extends Auth {
}

interface IUserGameData {
    gameId: string;
    userId: string;
    data: string;
    compressed: boolean;
}

declare class UserData implements Auth {
    private user;
    private readonly gameConfig;
    constructor(user: IUser, gameConfig: IAuthenticateGame);
    setGameData(data: any, compressed?: boolean): Promise<IUserGameData>;
    getGameData(): Promise<{
        data: any;
        gameId: string;
        userId: string;
        compressed: boolean;
    }>;
}
interface UserData extends Auth {
}

declare class User implements Auth {
    user: IUser | undefined;
    account: UserAccount | undefined;
    citizen: UserCitizen | undefined;
    balance: UserBalance | undefined;
    quest: UserQuest | undefined;
    friend: UserFriend | undefined;
    data: UserData | undefined;
    constructor(user: IUser, gameConfig: IAuthenticateGame);
    getUser(): IUser | undefined;
}
interface User extends Auth {
}

declare class Quest {
    private gameId;
    constructor(gameId: string);
    protected getList(): Promise<{
        data: any[];
    }>;
}

declare class Achievement {
    private gameId;
    constructor(gameId: string);
    protected getList(): Promise<{
        data: any[];
    }>;
}

declare enum TYPE_LEADER_BOARD_IN_GAME {
    TODAY = 0,
    WEEK = 1,
    MONTH = 2
}

declare class LeaderBoard {
    private gameId;
    constructor(gameId: string);
    protected getList(type: TYPE_LEADER_BOARD_IN_GAME): Promise<{
        data: any[];
    }>;
}

declare class GameClient implements Auth, GameMatch {
    readonly gameId: string;
    readonly apiKey: string;
    user: User | undefined;
    match: GameMatch | undefined;
    quest: Quest | undefined;
    achievement: Achievement | undefined;
    parentWindow: Window | undefined;
    leaderBoard: LeaderBoard | undefined;
    constructor(gameId: string, apiKey: string, parentWindow?: Window, options?: IClientOptions);
    initAsync(): Promise<void>;
}
interface GameClient extends Auth, GameMatch {
}

declare global {
    var gcAccessToken: string;
    var gcRefreshToken: string;
    var gcGuestInfo: string;
}

export { GameClient as default };
